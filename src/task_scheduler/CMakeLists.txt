# Pico CMake file
# Originally generated by Pico VS code extension
# but modified by me to extend the project

cmake_minimum_required(VERSION 3.13)  # can be updated to 3.15...3.30 if needed

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(PICO_SDK_PATH "/Users/nathanblackburn/pico-sdk")                            # extension is not recognising SDK
set(CMAKE_BINARY_DIR "${CMAKE_SOURCE_DIR}/build")                               # force cmake to always build in directory at set source directory

# Initialise pico_sdk from installed location
# (note this can come from environment, CMake cache, etc.)

# Remove the following block, since we don't need to reference .pico-sdk
# == DO NEVER EDIT THE NEXT LINES for Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.0.0)
set(toolchainVersion 13_2_Rel1)
set(picotoolVersion 2.0.0)
set(picoVscode ${USERHOME}/pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico_w CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
#
include(${PICO_SDK_PATH}/external/pico_sdk_import.cmake)


# 
project(task_scheduler 
            C 
            CXX 
            ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# Add executable
add_executable(task_scheduler round_robin_scheduler.c task_scheduler.c queue.c)

pico_set_program_name(task_scheduler "task_scheduler")
pico_set_program_version(task_scheduler "0.1")

# Modify the below lines to enable/disable output over UART/USB
pico_enable_stdio_uart(task_scheduler 1)
pico_enable_stdio_usb(task_scheduler 0)

# Add the standard library to the build
target_link_libraries(task_scheduler
        pico_stdlib
        hardware_gpio
        pico_cyw43_arch_none)  # CYW43 library

# Add the standard include files to the build
target_include_directories(task_scheduler PRIVATE
  ${CMAKE_CURRENT_LIST_DIR}
  ${CMAKE_CURRENT_LIST_DIR}/..  # for any common lwipopts or other standard includes
)

pico_add_extra_outputs(task_scheduler)